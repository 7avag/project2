# routers/commands.py

import json
import asyncio
import random
from aiogram import Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from config.settings import settings
from services.api_client import APIClient
from keyboards.builders import main_menu
from keyboards.inline import note_actions_keyboard
from filters.admin_filter import IsAdminFilter
from states.notes_state import NotesStates

router = Router()
api_client = APIClient()

# –°–ø–∏—Å–æ–∫ —Ä—É—Å—Å–∫–∏—Ö —à—É—Ç–æ–∫
RUSSIAN_JOKES = [
    "–ö–∞–∫-—Ç–æ —Ä–∞–∑ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –∑–∞—à–µ–ª –≤ –±–∞—Ä, –±–∞—Ä–º–µ–Ω —Å–ø—Ä–æ—Å–∏–ª: ¬´–ß—Ç–æ –±—É–¥–µ—Ç–µ?¬ª –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –æ—Ç–≤–µ—Ç–∏–ª: ¬´–î–∞ –ø–æ—Ö–æ–∂–µ, —á—Ç–æ –∑–∞–±—ã–ª–∏ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π... –ü–æ—á–µ–º—É –≤—Å—ë –ø–∞–¥–∞–µ—Ç?¬ª",
    "‚Äî –ê–ª–ª–æ, —ç—Ç–æ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞? –£ –º–µ–Ω—è –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç! ‚Äî –ê –≤—ã –ø—Ä–æ–±–æ–≤–∞–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç—å –∏ –≤–∫–ª—é—á–∏—Ç—å? ‚Äî –î–∞. ‚Äî –û—Ç–ª–∏—á–Ω–æ, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Å–Ω–æ–≤–∞.",
    "‚Äî –ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ø—É—Ç–∞—é—Ç Halloween –∏ Christmas? ‚Äî –ü–æ—Ç–æ–º—É —á—Ç–æ OCT 31 == DEC 25.",
    "–ï—Å–ª–∏ –±–∞–≥ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –≤–∞—à–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ ‚Äî —ç—Ç–æ –æ—à–∏–±–∫–∞. –ï—Å–ª–∏ –≤—ã –Ω–∞—à–ª–∏ –±–∞–≥ —É –∫–æ–ª–ª–µ–≥–∏ ‚Äî —ç—Ç–æ —Ñ–∏—á–∞."
]

def load_locale(lang: str) -> dict:
    with open(f"locales/{lang}.json", encoding="utf-8") as f:
        return json.load(f)

def load_user_notes(user_id: str) -> list[dict]:
    try:
        with open(settings.STORAGE_PATH, "r", encoding="utf-8") as f:
            db = json.load(f)
        return db["users"].get(user_id, [])
    except Exception:
        return []

def format_notes_list(notes: list[dict], lang: str) -> str:
    if not notes:
        return load_locale(lang)["notes_list_empty"]
    lines = []
    for n in notes:
        date, time_part = n["timestamp"].split("T")
        time_part = time_part[:8]
        lines.append(f"ID {n['id']}: {n['text']} ({date} {time_part})")
    return "\n".join(lines)

# –ö–Ω–æ–ø–∫–∏
BUTTON_HELP_RU = "‚ÑπÔ∏è –ü–æ–º–æ—â—å"
BUTTON_HELP_EN = "‚ÑπÔ∏è Help"
BUTTON_JOKE_RU = "ü§£ –®—É—Ç–∫–∞"
BUTTON_JOKE_EN = "ü§£ Joke"
BUTTON_LANGUAGE_RU = "üåê –Ø–∑—ã–∫"
BUTTON_LANGUAGE_EN = "üåê Language"
BUTTON_NOTES_RU = "üìÉ –ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏"
BUTTON_NOTES_EN = "üìÉ My Notes"

@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    # –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –≤—ã—Å—Ç–∞–≤–ª—è–µ–º —Ä—É—Å—Å–∫–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    await state.update_data(lang="ru")
    locale = load_locale("ru")
    text = locale["start_text"].format(user_name=message.from_user.full_name)
    keyboard = main_menu("ru")
    await message.answer(text, reply_markup=keyboard)

@router.message(Command("help"))
@router.message(lambda m: m.text == BUTTON_HELP_RU or m.text == BUTTON_HELP_EN)
async def cmd_help(message: Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get("lang", "ru")
    locale = load_locale(lang)
    await message.answer(locale["help_text"])

@router.message(Command("joke"))
@router.message(lambda m: m.text == BUTTON_JOKE_RU or m.text == BUTTON_JOKE_EN)
async def cmd_joke(message: Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get("lang", "ru")

    if message.text == BUTTON_JOKE_EN or lang == "en":
        locale = load_locale("en")
        await message.answer(locale["joke_loading"])
        joke = await api_client.get_random_joke()
        await message.answer(f"ü§£ {joke}")
    else:
        joke = random.choice(RUSSIAN_JOKES)
        await message.answer(f"ü§£ {joke}")

@router.message(Command("language"))
@router.message(lambda m: m.text == BUTTON_LANGUAGE_RU or m.text == BUTTON_LANGUAGE_EN)
async def cmd_language(message: Message, state: FSMContext):
    data = await state.get_data()
    current = data.get("lang", "ru")
    new_lang = "en" if current == "ru" else "ru"
    await state.update_data(lang=new_lang)
    locale = load_locale(new_lang)
    keyboard = main_menu(new_lang)
    await message.answer(locale["language_changed"].format(lang=new_lang), reply_markup=keyboard)

@router.message(Command("notes"))
@router.message(lambda m: m.text == BUTTON_NOTES_RU or m.text == BUTTON_NOTES_EN)
async def cmd_notes(message: Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get("lang", "ru")
    locale = load_locale(lang)

    user_id = str(message.from_user.id)
    notes = load_user_notes(user_id)
    notes_list = format_notes_list(notes, lang)

    await message.answer(notes_list)
    await message.answer(locale["notes_menu"], reply_markup=note_actions_keyboard(lang))

@router.callback_query(lambda c: c.data == "add_note")
async def cb_add_note(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    lang = data.get("lang", "ru")
    locale = load_locale(lang)
    await callback.message.answer(locale["enter_note_text"])
    await state.set_state(NotesStates.WAITING_FOR_NOTE_TEXT)
    await callback.answer()

@router.callback_query(lambda c: c.data == "delete_note")
async def cb_delete_note(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    lang = data.get("lang", "ru")
    locale = load_locale(lang)
    await callback.message.answer(locale["enter_delete_id"])
    await state.set_state(NotesStates.WAITING_FOR_DELETE_ID)
    await callback.answer()

@router.callback_query(lambda c: c.data == "cancel")
async def cb_cancel(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    lang = data.get("lang", "ru")
    locale = load_locale(lang)
    await callback.message.answer(locale["action_canceled"])
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –æ—Å—Ç–∞–≤–ª—è—è –¥–∞–Ω–Ω—ã–µ (lang –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è)
    await state.set_state(None)
    await callback.answer()

@router.message(NotesStates.WAITING_FOR_NOTE_TEXT)
async def process_note_text(message: Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get("lang", "ru")
    locale = load_locale(lang)

    text = message.text.strip()
    user_id = str(message.from_user.id)
    from datetime import datetime

    path = settings.STORAGE_PATH
    with open(path, "r+", encoding="utf-8") as f:
        db = json.load(f)
        user_notes = db["users"].get(user_id, [])
        new_id = 1 if not user_notes else max(n["id"] for n in user_notes) + 1
        note = {"id": new_id, "text": text, "timestamp": datetime.utcnow().isoformat()}
        user_notes.append(note)
        db["users"][user_id] = user_notes
        f.seek(0)
        json.dump(db, f, ensure_ascii=False, indent=4)
        f.truncate()

    await message.answer(locale["note_added"].format(note_id=new_id))
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –æ—Å—Ç–∞–≤–ª—è—è –¥–∞–Ω–Ω—ã–µ (lang –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è)
    await state.set_state(None)

@router.message(NotesStates.WAITING_FOR_DELETE_ID)
async def process_delete_id(message: Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get("lang", "ru")
    locale = load_locale(lang)

    try:
        note_id = int(message.text.strip())
    except ValueError:
        await message.answer(locale["invalid_id"])
        return

    user_id = str(message.from_user.id)
    path = settings.STORAGE_PATH
    with open(path, "r+", encoding="utf-8") as f:
        db = json.load(f)
        user_notes = db["users"].get(user_id, [])
        filtered = [n for n in user_notes if n["id"] != note_id]
        if len(filtered) == len(user_notes):
            await message.answer(locale["note_not_found"].format(note_id=note_id))
            return
        db["users"][user_id] = filtered
        f.seek(0)
        json.dump(db, f, ensure_ascii=False, indent=4)
        f.truncate()

    await message.answer(locale["note_deleted"].format(note_id=note_id))
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –æ—Å—Ç–∞–≤–ª—è—è –¥–∞–Ω–Ω—ã–µ (lang –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è)
    await state.set_state(None)

@router.message(Command("broadcast"), IsAdminFilter())
async def cmd_broadcast(message: Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get("lang", "ru")
    locale = load_locale(lang)

    parts = message.text.split(" ", 1)
    if len(parts) < 2 or not parts[1].strip():
        await message.reply(locale["broadcast_usage"])
        return
    text = parts[1].strip()

    path = settings.STORAGE_PATH
    with open(path, "r", encoding="utf-8") as f:
        db = json.load(f)
    users = db["users"].keys()

    sent = 0
    failed = 0
    for uid in users:
        try:
            await message.bot.send_message(int(uid), f"{locale['broadcast_prefix']} {text}")
            sent += 1
            await asyncio.sleep(0.05)
        except Exception:
            failed += 1
    await message.reply(locale["broadcast_result"].format(sent=sent, failed=failed))

@router.message(Command("stats"), IsAdminFilter())
async def cmd_stats(message: Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get("lang", "ru")
    locale = load_locale(lang)

    path = settings.STORAGE_PATH
    with open(path, "r", encoding="utf-8") as f:
        db = json.load(f)
    total_users = len(db["users"])
    await message.answer(locale["stats_text"].format(count=total_users))

@router.message(lambda m: m.text == BUTTON_NOTES_RU or m.text == BUTTON_NOTES_EN)
async def text_notes_menu(message: Message, state: FSMContext):
    await cmd_notes(message, state)

@router.message(lambda m: m.text == BUTTON_HELP_RU or m.text == BUTTON_HELP_EN)
async def text_help_menu(message: Message, state: FSMContext):
    await cmd_help(message, state)
